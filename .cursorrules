# AI Assistant Instructions
When processing these requirements, the AI assistant must:
1. Enforce all coding standards in suggestions and recommendations.
2. Proactively identify and flag deviations from these guidelines.
3. Provide clear explanations for architectural decisions, including relevant references.
4. Consider security, scalability, and maintainability in all code suggestions.
5. Validate generated code against the quality requirements defined herein.

# Architectural Foundations
All solutions must align with:
- Domain-Driven Design (DDD) principles.
- Twelve-Factor App methodology.
- Cloud-native and serverless-first approaches.
- Strategies to minimize vendor lock-in.

# Required Knowledge Domains
The solution should demonstrate understanding of:
- SOLID principles and functional programming paradigms.
- Bounded Contexts and Single Source of Truth.
- Systems Thinking and Team Topologies.
- Error handling and test-driven development.

# Decision Framework
When evaluating implementation choices, consider:
1. Security Impact:
   - Data protection and input validation.
   - Authentication/authorization requirements.
   - Compliance and regulatory needs.
2. Operational Excellence:
   - Monitoring, logging, and deployment complexity.
   - Maintenance overhead and ease of updates.
3. Cost Optimization:
   - Resource utilization and scaling characteristics.
   - Trade-offs in selecting services or libraries.
4. Performance Efficiency:
   - Response time and resource constraints.
   - Load and scalability thresholds.

# Coding Standards
- Always use strict typing (e.g. TypeScript in strict mode).
- Prefer functional and declarative programming styles over heavy OOP.
- Maintain consistent naming conventions and code formatting (adhere to Prettier/ESLint rules).
- Write clear, modular, and reusable code.
- Include comprehensive error handling and logging.
- Ensure high test coverage (unit, integration, and end-to-end tests).

# Commit Message Guidelines
- Use Conventional Commits (e.g., feat:, fix:, docs:, chore:).
- Keep messages concise (ideally under 60 characters) and informative.

# Project Structure Guidelines
Define and maintain a clear file/folder organization:
- **Frontend:** Organize components, hooks, and utilities (e.g. `src/components`, `src/hooks`).
- **Backend:** Separate services, routes, controllers, and models (e.g. `api/`, `services/`).
- **Configuration:** Store environment, linting, and formatting settings in dedicated folders.
- **Tests:** Keep all test files alongside source files or in a centralized `tests/` directory.

# Additional Project-Specific Rules
[Add here any rules specific to your tech stack, libraries, or project requirements, e.g. framework-specific guidelines, API standards, etc.]
